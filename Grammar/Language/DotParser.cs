//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from S:/Workspace/Analysis/Mobilize/Grammar/Syntax\DotParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Mobilize.Grammar.Language {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class DotParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRICT=1, GRAPH=2, DIGRAPH=3, NODE=4, EDGE=5, SUBGRAPH=6, LPAREN=7, RPAREN=8, 
		LBRACE=9, RBRACE=10, LBRACK=11, RBRACK=12, SEMI=13, COMMA=14, DOT=15, 
		COLON=16, ASSIGN=17, ARROW=18, OPTION=19, NUMBER=20, STRING=21, ID=22, 
		HTML_STRING=23, COMMENT=24, LINE_COMMENT=25, PREPROC=26, WS=27;
	public const int
		RULE_graph = 0, RULE_statement_list = 1, RULE_statement = 2, RULE_attribute_statement = 3, 
		RULE_attribute_list = 4, RULE_a_list = 5, RULE_edge_statement = 6, RULE_edgeRHS = 7, 
		RULE_edge_operation = 8, RULE_node_statement = 9, RULE_node_id = 10, RULE_port = 11, 
		RULE_subgraph = 12, RULE_id = 13;
	public static readonly string[] ruleNames = {
		"graph", "statement_list", "statement", "attribute_statement", "attribute_list", 
		"a_list", "edge_statement", "edgeRHS", "edge_operation", "node_statement", 
		"node_id", "port", "subgraph", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'('", "')'", "'{'", "'}'", 
		"'['", "']'", "';'", "','", "'.'", "':'", "'='", "'->'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRICT", "GRAPH", "DIGRAPH", "NODE", "EDGE", "SUBGRAPH", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", 
		"COLON", "ASSIGN", "ARROW", "OPTION", "NUMBER", "STRING", "ID", "HTML_STRING", 
		"COMMENT", "LINE_COMMENT", "PREPROC", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DotParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DotParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DotParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DotParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class GraphContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(DotParser.LBRACE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(DotParser.RBRACE, 0); }
		public ITerminalNode GRAPH() { return GetToken(DotParser.GRAPH, 0); }
		public ITerminalNode DIGRAPH() { return GetToken(DotParser.DIGRAPH, 0); }
		public ITerminalNode STRICT() { return GetToken(DotParser.STRICT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public GraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graph; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterGraph(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitGraph(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphContext graph() {
		GraphContext _localctx = new GraphContext(Context, State);
		EnterRule(_localctx, 0, RULE_graph);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRICT) {
				{
				State = 28; Match(STRICT);
				}
			}

			State = 31;
			_la = TokenStream.LA(1);
			if ( !(_la==GRAPH || _la==DIGRAPH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << ID) | (1L << HTML_STRING))) != 0)) {
				{
				State = 32; id();
				}
			}

			State = 35; Match(LBRACE);
			State = 36; statement_list();
			State = 37; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(DotParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(DotParser.SEMI, i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GRAPH) | (1L << NODE) | (1L << EDGE) | (1L << SUBGRAPH) | (1L << LBRACE) | (1L << NUMBER) | (1L << STRING) | (1L << ID) | (1L << HTML_STRING))) != 0)) {
				{
				{
				State = 39; statement();
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 40; Match(SEMI);
					}
				}

				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Node_statementContext node_statement() {
			return GetRuleContext<Node_statementContext>(0);
		}
		public Edge_statementContext edge_statement() {
			return GetRuleContext<Edge_statementContext>(0);
		}
		public Attribute_statementContext attribute_statement() {
			return GetRuleContext<Attribute_statementContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(DotParser.ASSIGN, 0); }
		public SubgraphContext subgraph() {
			return GetRuleContext<SubgraphContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; node_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; edge_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50; attribute_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 51; id();
				State = 52; Match(ASSIGN);
				State = 53; id();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 55; subgraph();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_statementContext : ParserRuleContext {
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public ITerminalNode GRAPH() { return GetToken(DotParser.GRAPH, 0); }
		public ITerminalNode NODE() { return GetToken(DotParser.NODE, 0); }
		public ITerminalNode EDGE() { return GetToken(DotParser.EDGE, 0); }
		public Attribute_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterAttribute_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitAttribute_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_statementContext attribute_statement() {
		Attribute_statementContext _localctx = new Attribute_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_attribute_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GRAPH) | (1L << NODE) | (1L << EDGE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 59; attribute_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public ITerminalNode[] LBRACK() { return GetTokens(DotParser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(DotParser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(DotParser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(DotParser.RBRACK, i);
		}
		public A_listContext[] a_list() {
			return GetRuleContexts<A_listContext>();
		}
		public A_listContext a_list(int i) {
			return GetRuleContext<A_listContext>(i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterAttribute_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitAttribute_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 61; Match(LBRACK);
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << ID) | (1L << HTML_STRING))) != 0)) {
					{
					State = 62; a_list();
					}
				}

				State = 65; Match(RBRACK);
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LBRACK );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_listContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] ASSIGN() { return GetTokens(DotParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(DotParser.ASSIGN, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DotParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DotParser.COMMA, i);
		}
		public A_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterA_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitA_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitA_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public A_listContext a_list() {
		A_listContext _localctx = new A_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_a_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 70; id();
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 71; Match(ASSIGN);
					State = 72; id();
					}
				}

				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 75; Match(COMMA);
					}
				}

				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << ID) | (1L << HTML_STRING))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Edge_statementContext : ParserRuleContext {
		public EdgeRHSContext edgeRHS() {
			return GetRuleContext<EdgeRHSContext>(0);
		}
		public Node_idContext node_id() {
			return GetRuleContext<Node_idContext>(0);
		}
		public SubgraphContext subgraph() {
			return GetRuleContext<SubgraphContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Edge_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edge_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterEdge_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitEdge_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdge_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Edge_statementContext edge_statement() {
		Edge_statementContext _localctx = new Edge_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_edge_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
			case STRING:
			case ID:
			case HTML_STRING:
				{
				State = 82; node_id();
				}
				break;
			case SUBGRAPH:
			case LBRACE:
				{
				State = 83; subgraph();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 86; edgeRHS();
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 87; attribute_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeRHSContext : ParserRuleContext {
		public Edge_operationContext[] edge_operation() {
			return GetRuleContexts<Edge_operationContext>();
		}
		public Edge_operationContext edge_operation(int i) {
			return GetRuleContext<Edge_operationContext>(i);
		}
		public Node_idContext[] node_id() {
			return GetRuleContexts<Node_idContext>();
		}
		public Node_idContext node_id(int i) {
			return GetRuleContext<Node_idContext>(i);
		}
		public SubgraphContext[] subgraph() {
			return GetRuleContexts<SubgraphContext>();
		}
		public SubgraphContext subgraph(int i) {
			return GetRuleContext<SubgraphContext>(i);
		}
		public EdgeRHSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeRHS; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterEdgeRHS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitEdgeRHS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgeRHS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgeRHSContext edgeRHS() {
		EdgeRHSContext _localctx = new EdgeRHSContext(Context, State);
		EnterRule(_localctx, 14, RULE_edgeRHS);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 90; edge_operation();
				State = 93;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
				case STRING:
				case ID:
				case HTML_STRING:
					{
					State = 91; node_id();
					}
					break;
				case SUBGRAPH:
				case LBRACE:
					{
					State = 92; subgraph();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ARROW || _la==OPTION );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Edge_operationContext : ParserRuleContext {
		public ITerminalNode ARROW() { return GetToken(DotParser.ARROW, 0); }
		public ITerminalNode OPTION() { return GetToken(DotParser.OPTION, 0); }
		public Edge_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edge_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterEdge_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitEdge_operation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdge_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Edge_operationContext edge_operation() {
		Edge_operationContext _localctx = new Edge_operationContext(Context, State);
		EnterRule(_localctx, 16, RULE_edge_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_la = TokenStream.LA(1);
			if ( !(_la==ARROW || _la==OPTION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Node_statementContext : ParserRuleContext {
		public Node_idContext node_id() {
			return GetRuleContext<Node_idContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Node_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterNode_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitNode_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNode_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Node_statementContext node_statement() {
		Node_statementContext _localctx = new Node_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_node_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; node_id();
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 102; attribute_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Node_idContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public PortContext port() {
			return GetRuleContext<PortContext>(0);
		}
		public Node_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterNode_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitNode_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNode_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Node_idContext node_id() {
		Node_idContext _localctx = new Node_idContext(Context, State);
		EnterRule(_localctx, 20, RULE_node_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; id();
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 106; port();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PortContext : ParserRuleContext {
		public ITerminalNode[] COLON() { return GetTokens(DotParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(DotParser.COLON, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public PortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterPort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitPort(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PortContext port() {
		PortContext _localctx = new PortContext(Context, State);
		EnterRule(_localctx, 22, RULE_port);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(COLON);
			State = 110; id();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 111; Match(COLON);
				State = 112; id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubgraphContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(DotParser.LBRACE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(DotParser.RBRACE, 0); }
		public ITerminalNode SUBGRAPH() { return GetToken(DotParser.SUBGRAPH, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public SubgraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subgraph; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterSubgraph(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitSubgraph(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubgraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubgraphContext subgraph() {
		SubgraphContext _localctx = new SubgraphContext(Context, State);
		EnterRule(_localctx, 24, RULE_subgraph);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBGRAPH) {
				{
				State = 115; Match(SUBGRAPH);
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << ID) | (1L << HTML_STRING))) != 0)) {
					{
					State = 116; id();
					}
				}

				}
			}

			State = 121; Match(LBRACE);
			State = 122; statement_list();
			State = 123; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DotParser.ID, 0); }
		public ITerminalNode STRING() { return GetToken(DotParser.STRING, 0); }
		public ITerminalNode HTML_STRING() { return GetToken(DotParser.HTML_STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(DotParser.NUMBER, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotParserListener typedListener = listener as IDotParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotParserVisitor<TResult> typedVisitor = visitor as IDotParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 26, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << ID) | (1L << HTML_STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1D', '\x82', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x5', '\x2', ' ', '\n', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '$', '\n', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', ',', '\n', '\x3', '\a', '\x3', '.', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '\x31', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', ';', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x42', '\n', 
		'\x6', '\x3', '\x6', '\x6', '\x6', '\x45', '\n', '\x6', '\r', '\x6', '\xE', 
		'\x6', '\x46', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'L', 
		'\n', '\a', '\x3', '\a', '\x5', '\a', 'O', '\n', '\a', '\x6', '\a', 'Q', 
		'\n', '\a', '\r', '\a', '\xE', '\a', 'R', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', 'W', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '[', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '`', '\n', '\t', 
		'\x6', '\t', '\x62', '\n', '\t', '\r', '\t', '\xE', '\t', '\x63', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'j', '\n', '\v', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', 'n', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 't', '\n', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', 'x', '\n', '\xE', '\x5', '\xE', 'z', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x2', '\x2', '\x10', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x2', '\x6', '\x3', '\x2', '\x4', '\x5', '\x4', '\x2', 
		'\x4', '\x4', '\x6', '\a', '\x3', '\x2', '\x14', '\x15', '\x3', '\x2', 
		'\x16', '\x19', '\x2', '\x89', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '/', '\x3', '\x2', '\x2', '\x2', '\x6', ':', '\x3', '\x2', '\x2', 
		'\x2', '\b', '<', '\x3', '\x2', '\x2', '\x2', '\n', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'P', '\x3', '\x2', '\x2', '\x2', '\xE', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x61', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x14', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'k', '\x3', '\x2', '\x2', '\x2', '\x18', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', 'y', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', ' ', '\a', '\x3', '\x2', '\x2', '\x1F', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', 
		'\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '#', '\t', '\x2', '\x2', 
		'\x2', '\"', '$', '\x5', '\x1C', '\xF', '\x2', '#', '\"', '\x3', '\x2', 
		'\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', 
		'\x2', '\x2', '%', '&', '\a', '\v', '\x2', '\x2', '&', '\'', '\x5', '\x4', 
		'\x3', '\x2', '\'', '(', '\a', '\f', '\x2', '\x2', '(', '\x3', '\x3', 
		'\x2', '\x2', '\x2', ')', '+', '\x5', '\x6', '\x4', '\x2', '*', ',', '\a', 
		'\xF', '\x2', '\x2', '+', '*', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', 
		'\x2', '\x2', '\x2', ',', '.', '\x3', '\x2', '\x2', '\x2', '-', ')', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', 
		'\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x32', ';', '\x5', '\x14', '\v', '\x2', '\x33', ';', '\x5', '\xE', '\b', 
		'\x2', '\x34', ';', '\x5', '\b', '\x5', '\x2', '\x35', '\x36', '\x5', 
		'\x1C', '\xF', '\x2', '\x36', '\x37', '\a', '\x13', '\x2', '\x2', '\x37', 
		'\x38', '\x5', '\x1C', '\xF', '\x2', '\x38', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ';', '\x5', '\x1A', '\xE', '\x2', ':', '\x32', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x33', '\x3', '\x2', '\x2', '\x2', ':', '\x34', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x35', '\x3', '\x2', '\x2', '\x2', ':', '\x39', 
		'\x3', '\x2', '\x2', '\x2', ';', '\a', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\t', '\x3', '\x2', '\x2', '=', '>', '\x5', '\n', '\x6', '\x2', '>', 
		'\t', '\x3', '\x2', '\x2', '\x2', '?', '\x41', '\a', '\r', '\x2', '\x2', 
		'@', '\x42', '\x5', '\f', '\a', '\x2', '\x41', '@', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x45', '\a', '\xE', '\x2', '\x2', '\x44', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\v', '\x3', '\x2', '\x2', '\x2', 'H', 'K', 
		'\x5', '\x1C', '\xF', '\x2', 'I', 'J', '\a', '\x13', '\x2', '\x2', 'J', 
		'L', '\x5', '\x1C', '\xF', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\x3', '\x2', '\x2', '\x2', 
		'M', 'O', '\a', '\x10', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'P', 'H', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 
		'S', '\r', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x5', '\x16', '\f', 
		'\x2', 'U', 'W', '\x5', '\x1A', '\xE', '\x2', 'V', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Z', '\x5', '\x10', '\t', '\x2', 'Y', '[', '\x5', '\n', 
		'\x6', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', 
		'\x2', '\x2', '[', '\xF', '\x3', '\x2', '\x2', '\x2', '\\', '_', '\x5', 
		'\x12', '\n', '\x2', ']', '`', '\x5', '\x16', '\f', '\x2', '^', '`', '\x5', 
		'\x1A', '\xE', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '^', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x62', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x11', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\t', '\x4', '\x2', '\x2', '\x66', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'i', '\x5', '\x16', '\f', '\x2', 'h', 'j', '\x5', '\n', '\x6', 
		'\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'j', '\x15', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x5', '\x1C', 
		'\xF', '\x2', 'l', 'n', '\x5', '\x18', '\r', '\x2', 'm', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', '\x17', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'p', '\a', '\x12', '\x2', '\x2', 'p', 's', '\x5', 
		'\x1C', '\xF', '\x2', 'q', 'r', '\a', '\x12', '\x2', '\x2', 'r', 't', 
		'\x5', '\x1C', '\xF', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 's', 
		't', '\x3', '\x2', '\x2', '\x2', 't', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'u', 'w', '\a', '\b', '\x2', '\x2', 'v', 'x', '\x5', '\x1C', '\xF', '\x2', 
		'w', 'v', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 
		'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', 'u', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', 
		'{', '|', '\a', '\v', '\x2', '\x2', '|', '}', '\x5', '\x4', '\x3', '\x2', 
		'}', '~', '\a', '\f', '\x2', '\x2', '~', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\t', '\x5', '\x2', '\x2', '\x80', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x1F', '#', '+', '/', ':', '\x41', '\x46', 
		'K', 'N', 'R', 'V', 'Z', '_', '\x63', 'i', 'm', 's', 'w', 'y',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Mobilize.Grammar.Language
